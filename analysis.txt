EECS 117 - Homework 4
Anissa Tran 47098893
Josue Galeas 72625644

_____________________________________________________
Part 1:
	Q1: How many levels of cache do there appear to be?
		There are two levels of cache in this image. L1 and L2.
	Q2: For each level of cache, what is it's capacity? Line size?
		For the L1 cache it's capacity is 32KiB and line size is 16 Bytes. The L2 cache has a capacity of 4 MiB and line size of 512 Bytes.

_____________________________________________________
Part 2:
	Q3:
		Anissa ran ./mm 1024 1024 1024 and had the following results:
		(1) 16.9923s (2) 61.102s (3) 60.9968s (4) 61.3216s (5) 61.7574
		Josue ran ./mm 1024 1024 1024 and had the following results:
		(1) 18.6515s (2) 18.5636s (3) 62.3765s (4) 30.7632s (5) 60.9635s (6) 17.4649s (7) 17.262s
		We are not sure why we recorded such a small value the first run through but based on this data the naive version either runs at 0.134 Gflops/s for the 16.99s run through or 0.0352Gflops/s for the average of the others (~61.29s)
		We used the equation: numOps = 2*n*m*k and Gflops/s = 1.0e-9 * numOps/Execution Time
	Q4:
     Completed cache-blocked version of matrix-matrix multiply. Subblock can be varied.
	Q5: Vary block size and measure/report performance of code in terms of GFLOP/s. Operations = (2(n/blocksize)^3)*blocksize^3
     SubBlock Size = 2, Operations = 2147483648:
       (1) 12.2527s (2) 8.582s (3) 8.35807s
       ~0.22068 GFlops 
     SubBlock Size = 8, Operations = 2147483648:
       (1) 3.08026s (2) 1.81849s (3) 3.09276s
       ~0.80616 GFlops
     SubBlock Size = 32, Operations = 2147483648:
       (1) 2.2726s (2) 2.26687s (3) 2.21704s
       ~0.9535175 GFlops
     SubBlock Size = 64, Operations = 2147483648:
       (1) 2.06591s (2) 2.03813s (3) 2.07394s
       ~1.042815 GFlops 
     SubBlock Size = 128, Operations = 2098176:
       (1) 2.09947s (2) 2.08897s (3) 2.081s
       ~1.02759 GFlops
     SubBlock Size = 512, Operations = 134217744:
       (1) 1.93873s (2) 2.23177s (3) 1.98782s
       ~1.04614 GFlops
   Based on our data and some research, we estimate L1 and L2 to be 32KB and 6MB respectively. This works with out data because the naive version is much larger than 6MB in operations so it would always go to slow memory. 
	Q6:
